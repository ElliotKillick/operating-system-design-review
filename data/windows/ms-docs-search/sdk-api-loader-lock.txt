sdk-api-src/content/shellapi/nf-shellapi-shellexecuteexw.md:88:When DLLs are loaded into your process, you acquire a lock known as a <a href="/windows/win32/win7appqual/preventing-hangs-in-windows-applications">loader lock</a>. The <a href="/windows/desktop/Dlls/dllmain">DllMain</a> function always executes under the loader lock. It is important that you do not call <b>ShellExecuteEx</b> while you hold a loader lock. Because <b>ShellExecuteEx</b> is extensible, you could load code that does not function properly in the presence of a loader lock, risking a deadlock and therefore an unresponsive thread.
sdk-api-src/content/shellapi/nf-shellapi-shellexecuteexa.md:88:When DLLs are loaded into your process, you acquire a lock known as a <a href="/windows/win32/win7appqual/preventing-hangs-in-windows-applications">loader lock</a>. The <a href="/windows/desktop/Dlls/dllmain">DllMain</a> function always executes under the loader lock. It is important that you do not call <b>ShellExecuteEx</b> while you hold a loader lock. Because <b>ShellExecuteEx</b> is extensible, you could load code that does not function properly in the presence of a loader lock, risking a deadlock and therefore an unresponsive thread.
sdk-api-src/content/evntrace/nc-evntrace-wmidprequest.md:141:specifically, anything that requires a loader lock).
sdk-api-src/content/evntprov/nc-evntprov-penablecallback.md:244:> anything that requires the process's loader lock, i.e. it must not directly or
sdk-api-src/content/winnt/nf-winnt-tpsetcallbackracewithdll.md:67:You should call this function if a callback might acquire the loader lock. This prevents a deadlock from occurring when one thread in DllMain is waiting for the callback to end, and another thread that is executing the callback attempts to acquire the loader lock.
sdk-api-src/content/winnt/nf-winnt-tpsetcallbackracewithdll.md:71:Managing callbacks created with a TP_CALLBACK_ENVIRON that specifies a callback library is somewhat processing-intensive.  You should consider other options for ensuring that the library is not unloaded while callbacks are executing, or to guarantee that callbacks which may be executing do not acquire the loader lock.
sdk-api-src/content/winbase/nf-winbase-setthreadpoolcallbacklibrary.md:67:You should call this function if a callback might acquire the loader lock. This prevents a deadlock from occurring when one thread in DllMain is waiting for the callback to end, and another thread that is executing the callback attempts to acquire the loader lock.
sdk-api-src/content/winbase/nf-winbase-setthreadpoolcallbacklibrary.md:71:Managing callbacks created with a TP_CALLBACK_ENVIRON that specifies a callback library is somewhat processing-intensive.  You should consider other options for ensuring that the library is not unloaded while callbacks are executing, or to guarantee that callbacks which may be executing do not acquire the loader lock.
sdk-api-src/content/winver/nf-winver-getfileversioninfoexw.md:106:Indicates a preference for version.dll to attempt to preload the image outside of the loader lock to avoid contention.  This flag does not change the behavior or semantics of the function.
sdk-api-src/content/winver/nf-winver-getfileversioninfoexa.md:106:Indicates a preference for version.dll to attempt to preload the image outside of the loader lock to avoid contention.  This flag does not change the behavior or semantics of the function.
